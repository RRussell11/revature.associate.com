package com.revature.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import com.revature.dto.AddOrEditClientDTO;
import com.revature.exception.BadParameterException;
import com.revature.exception.ClientNotFoundException;
import com.revature.exception.DatabaseException;
import com.revature.model.Client;
import com.revature.util.ConnectionUtility;
//import com.revature.dao.*;

public class ClientDAOImpl<clientacc_BalanceClientDTO> implements ClientDAO {

	@Override
	public List<Client> getAllclients() throws SQLException {
		// List to construct All clients(object)- helps, query
		List<Client> clients = new ArrayList<>();
		// Array list to iterate over All clients
		try (Connection con = ConnectionUtility.getConnection()) {
			// getting a Connection /object

			// Obtain Statement /object (Statement, PreparedStatement)

			Statement stmt = con.createStatement();

			// 3. Execute the query
			String sql = "SELECT * FROM client";
			ResultSet rs = stmt.executeQuery(sql);

			while (rs.next()) {

				String firstname = rs.getString("first_name");
				String lastname = rs.getString("last_name");
				int clientIndexId = rs.getInt("clientindexid");

				Client client = new Client(clientIndexId, firstname, lastname);

				clients.add(client);
			}
		}

		return clients;
	}
	// The indexid (a,b,c,d) is the order where the object(client) will be list,
	// helps iteration (object), modern architecture makes use of indexid
	// for example online banks

	public Client getclientByIndexId(int id) throws SQLException {
		// TODO Auto-generated method stub

		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "SELECT * FROM public.client WHERE clientindexid = ?";

			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, id);

			// Execute the query
			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {

				int clientIndexId = rs.getInt("clientIndexId");
				String firstname = rs.getString("first_name");
				String lastname = rs.getString("last_name");

				Client client = new Client(id, firstname, lastname);
				client.add(client);
				return client;
			} else {
				return null;
			}
		}
	}

	@Override
	public Client addclient(AddOrEditClientDTO client) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "INSERT INTO public.client (first_name,last_name ) VALUES (?, ?)";
			PreparedStatement pstmt = con.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS);

			pstmt.setString(1, client.getFirstName());
			pstmt.setString(2, client.getLastName());

			int recordsUpdated = pstmt.executeUpdate(); // Use executeUpdate when working with INSERT, UPDATE, or DELETE
			// int executeQuery()= pstmt.executeResult; // ResultSet (obviously coming from
			// using SELECT)
			if (recordsUpdated != 1) {
				throw new SQLException("Could not insert a client record");
			}

			ResultSet generatedKeys = pstmt.getGeneratedKeys();
			if (generatedKeys.next()) {
				Client createdclient = new Client(generatedKeys.getInt(1), client.getFirstName(), client.getLastName());

				return createdclient;
			} else {
				throw new SQLException("Autogenerated clientIndexId could not be obtained for Client");
			}

		}
	}

	@Override
	public Client editclient(int clientId, AddOrEditClientDTO client) throws SQLException {
		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "UPDATE public.client = ?last_name = ? WHERE clientIndexId = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			// pstmt.setString(1, client.checkingaccount());
			// pstmt.setString(2, client.savingaccount());
			pstmt.setInt(3, clientId);

			int recordsUpdated = pstmt.executeUpdate();
			if (recordsUpdated != 1) {
				throw new SQLException("Record was not able to be updated");
			}
			Client client1 = new Client(clientId, "first_name", "last_name");

			client.editclient(client);
			return new Client(clientId, client.getFirstName(), client.getLastName());
		}
		// return client;
	}

	@Override
	public void deleteclient(int clientIndexId) throws SQLException {

		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "DELETE FROM public.client = first_name, last_name = ? WHERE clientIndexId = ?";
			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, clientIndexId);

			int recordsDeleted = pstmt.executeUpdate();

			// 1 defines deletion, based on: != equality
			if (recordsDeleted != 1) {
				throw new SQLException("Record was not able to be deleted");
			}
			Client client1 = new Client(clientIndexId, "first_name", "last_name");

			client1.deleteclient(client1);
			// return new Client(clientIndexId, client1.getFirstName(),
			// client1.getLastName());
		}
	}

	// @Override
	public Client getclientacc_balance1(int clientindexid1) {

		try (Connection con = ConnectionUtility.getConnection()) {
			String sql = "SELECT * FROM public.client = first_name, last_name = ?  WHERE clientindexid = ?";

			PreparedStatement pstmt = con.prepareStatement(sql);

			pstmt.setInt(1, clientindexid1);

			// Execute the query
			ResultSet rs = pstmt.executeQuery();

			if (rs.next()) {

				int clientIndexId1 = rs.getInt("clientIndexId");
				String firstname = rs.getString("first_name");
				String lastname = rs.getString("last_name");

				Client client = new Client(clientindexid1, firstname, lastname);
				client.clientacc_balance(client);
				return client;
			} else {
				return null;
			}
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return null;
	}

	@Override
	public Object getclientacc_Balance(String clientIndexId) { // getclientacc_Balance(String clientIndexId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public List<Client> getAllClientsFromAccount(String clientindexid) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Client editclient(Client clientId, AddOrEditClientDTO client) throws SQLException {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Client deleteclient(ClientDAO clientDao, Object client) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Client getclientacc_balance(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object getclientByIndexId(String clientIndexId) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Object getAllClientsFromAccount(int eq) {
		// TODO Auto-generated method stub
		return null;
	}

}
